INTTK int
<FuncType>
IDENFR fib
LPARENT (
INTTK int
IDENFR i
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL ==
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
IFTK if
LPARENT (
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
EQL ==
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<RelExp>
<EqExp>
<LAndExp>
<LOrExp>
<Cond>
RPARENT )
LBRACE {
RETURNTK return
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<Stmt>
<Stmt>
RETURNTK return
IDENFR fib
LPARENT (
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR fib
LPARENT (
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR j
ASSIGN =
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
IDENFR i
<LVal>
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
<Stmt>
IDENFR j
<LVal>
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
<Stmt>
CONSTTK const
INTTK int
IDENFR a
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
IDENFR i
<LVal>
ASSIGN =
LPARENT (
MINU -
<UnaryOp>
LPARENT (
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
MULT *
IDENFR fib
LPARENT (
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
IDENFR a
LBRACK [
IDENFR fib
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RBRACK ]
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
IDENFR j
<LVal>
ASSIGN =
INTCON 7
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 5923
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 56
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 56
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
IDENFR fib
LPARENT (
IDENFR fib
LPARENT (
INTCON 6
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<FuncRParams>
RPARENT )
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
LPARENT (
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
LPARENT (
INTCON 89
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 36
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 53
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 6
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
LPARENT (
INTCON 45
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 56
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 85
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 56
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
PLUS +
INTCON 35
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
MULT *
INTCON 56
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
DIV /
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
MINU -
INTCON 9
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
INTTK int
IDENFR k
ASSIGN =
PLUS +
<UnaryOp>
MINU -
<UnaryOp>
PLUS +
<UnaryOp>
INTCON 5
<Number>
<PrimaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
PRINTFTK printf
LPARENT (
STRCON "%d, %d, %d\n"
COMMA ,
IDENFR i
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
IDENFR j
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
COMMA ,
IDENFR k
<LVal>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
RPARENT )
SEMICN ;
<Stmt>
RETURNTK return
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<MainFuncDef>
<CompUnit>
